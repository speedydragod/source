package com.sinolife.commons.excel;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.openxml4j.opc.PackageAccess;
import org.apache.poi.ss.usermodel.BuiltinFormats;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.eventusermodel.ReadOnlySharedStringsTable;
import org.apache.poi.xssf.model.StylesTable;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import com.sinolife.commons.exception.AppException;


/**
 * A rudimentary XLSX -> CSV processor modeled on the
 * POI sample program XLS2CSVmra by Nick Burch from the
 * package org.apache.poi.hssf.eventusermodel.examples.
 * Unlike the HSSF version, this one completely ignores 
 * missing rows.
 * 
 * Data sheets are read using a SAX parser to keep the 
 * memory footprint relatively small, so this should be
 * able to read enormous workbooks.  The styles table and
 * the shared-string table must be kept in memory.  The
 * standard POI styles table class is used, but a custom
 * (read-only) class is used for the shared string table
 * because the standard POI SharedStringsTable grows very
 * quickly with the number of unique strings.
 * 
 * @author Chris Lott
 * 
 * @category 读取excel2007,采用事件模型,空单元格输出""
 */
public class ExcelXReader {

	/**
	 * The type of the data value is indicated by an attribute on 
	 * the cell element; the value is in a "v" element within the cell.
	 */
	enum xssfDataType {
		BOOL,
		ERROR,
		FORMULA,
		INLINESTR,
		SSTINDEX,
		NUMBER,
	}

	/**
	 * Derived from http://poi.apache.org/spreadsheet/how-to.html#xssf_sax_api
	 * 
	 * Also see Standard ECMA-376, 1st edition, part 4, pages 1928ff, at
	 * http://www.ecma-international.org/publications/standards/Ecma-376.htm
	 * 
	 * A web-friendly version is http://openiso.org/Ecma/376/Part4
	 */
	private class MyXSSFSheetHandler extends DefaultHandler {

		/** Table with styles */
		private StylesTable stylesTable;

		/** Table with unique strings */
		private ReadOnlySharedStringsTable sharedStringsTable;

		/** Number of columns to read starting with leftmost */
		private final int minColumnCount;

		// Set when V start element is seen
		private boolean vIsOpen;

		// Set when cell start element is seen;
		// used when cell close element is seen.
		private xssfDataType nextDataType;

		// Used to format numeric cell values.
		private short formatIndex;
		private String formatString;
		private final DataFormatter formatter;

		private int thisColumn = -1;
		private int curCol = 0;		//当前列索引

		private int preCol = 0;		//上一列列索引
		// The last column printed to the output stream
		private int lastColumnNumber = -1;

		// Gathers characters as they are seen.
		private StringBuffer value;

		//保存数据用的List
		private List<List<String>> list;
		
		//保存每行数据用的List
		private List<String> innerList = new ArrayList<String>();
		
		//读取行数限制
		private int rowlimit = -1;
		
		/**
		 * Accepts objects needed while parsing.
		 * 
		 * @param styles Table of styles
		 * @param strings Table of shared strings
		 * @param cols Minimum number of columns to show
		 * @param target Sink for output
		 */
		public MyXSSFSheetHandler(
				StylesTable styles,
				ReadOnlySharedStringsTable strings,
				int cols,
				List<List<String>> dataList,
				int rowlimit) {
			this.list = dataList;
			this.stylesTable = styles;
			this.sharedStringsTable = strings;
			this.minColumnCount = cols;
			this.value = new StringBuffer();
			this.nextDataType = xssfDataType.NUMBER;
			this.formatter = new DataFormatter();
			this.rowlimit = rowlimit;
		}

		/*
		 * (non-Javadoc)
		 * @see org.xml.sax.helpers.DefaultHandler#startElement(java.lang.String, java.lang.String,java.lang.String, org.xml.sax.Attributes)
		 */
		public void startElement(String uri, String localName, String name,
				Attributes attributes) throws SAXException {

			if ("inlineStr".equals(name) || "v".equals(name)) {
				vIsOpen = true; 
				// Clear contents cache
				value.setLength(0);
			}
			// c => cell
			else if ("c".equals(name)) {
				// Get the cell reference
				String r = attributes.getValue("r");
				int firstDigit = -1;
				for (int c = 0; c < r.length(); ++c) {
					if (Character.isDigit(r.charAt(c))) {
						firstDigit = c;
						break;
					}
				}
				thisColumn = nameToColumn(r.substring(0, firstDigit));
				curCol = thisColumn+1;//getColIndex(r);//与thisColumn计数方式差1，避免重复计算，直接加1

				// Set up defaults.
				this.nextDataType = xssfDataType.NUMBER;
				this.formatIndex = -1;
				this.formatString = null;
				String cellType = attributes.getValue("t");
				String cellStyleStr = attributes.getValue("s");
				if ("b".equals(cellType))
					nextDataType = xssfDataType.BOOL;
				else if ("e".equals(cellType))
					nextDataType = xssfDataType.ERROR;
				else if ("inlineStr".equals(cellType))
					nextDataType = xssfDataType.INLINESTR;
				else if ("s".equals(cellType))
					nextDataType = xssfDataType.SSTINDEX;
				else if ("str".equals(cellType))
					nextDataType = xssfDataType.FORMULA;
				else if (cellStyleStr != null) {
					/*
					 * It's a number, but possibly has a style and/or special format.
					 * Nick Burch said to use org.apache.poi.ss.usermodel.BuiltinFormats, 
					 * and I see javadoc for that at apache.org, but it's not in the
					 * POI 3.5 Beta 5 jars.  Scheduled to appear in 3.5 beta 6.
					 */
					int styleIndex = Integer.parseInt(cellStyleStr);
					XSSFCellStyle style = stylesTable.getStyleAt(styleIndex);
					this.formatIndex = style.getDataFormat();
					this.formatString = style.getDataFormatString();
					if (this.formatString == null)
						this.formatString = BuiltinFormats.getBuiltinFormat(this.formatIndex);
				}
			}

		}

		/*
		 * (non-Javadoc)
		 * @see org.xml.sax.helpers.DefaultHandler#endElement(java.lang.String, java.lang.String,java.lang.String)
		 */
		public void endElement(String uri, String localName, String name)throws SAXException {

			String thisStr = null;

			// v => contents of a cell
			if ("v".equals(name)) {
				// Process the value contents as required.
				// Do now, as characters() may be called more than once
				switch(nextDataType) {

				case BOOL:
					char first = value.charAt(0);
					thisStr = first == '0' ? "FALSE" : "TRUE";
					break;

				case ERROR:
					thisStr = "\"ERROR:" + value.toString() + '"';
					break;	

				case FORMULA: 
					// A formula could result in a string value,
					// so always add double-quote characters.
					thisStr = '"' + value.toString() + '"';
					break;

				case INLINESTR:
					// TODO: have seen an example of this, so it's untested.
					XSSFRichTextString rtsi = new XSSFRichTextString(value.toString());
					thisStr = '"' + rtsi.toString() + '"'; 
					break;

				case SSTINDEX:
					String sstIndex = value.toString();
					try {
						int idx = Integer.parseInt(sstIndex);
						XSSFRichTextString rtss = new XSSFRichTextString(sharedStringsTable.getEntryAt(idx));
						thisStr = '"' + rtss.toString() + '"'; 
					}
					catch (NumberFormatException ex) {
						System.err.println("Failed to parse SST index '" + sstIndex + "': " + ex.toString());
					}
					break;

				case NUMBER:
					String n = value.toString();
					if (this.formatString != null)
						thisStr = formatter.formatRawCellContents(Double.parseDouble(n), this.formatIndex, this.formatString);
					else
						thisStr = n;
					break;

				default:
					thisStr = "(TODO: Unexpected type: " + nextDataType + ")";
				break;
				}

				// Output after we've seen the string contents
				// Emit commas for any fields that were missing on this row
				if(lastColumnNumber == -1) { 
					lastColumnNumber = 0; 
				}
				
				//-----------------------------------------begin
				int cols = curCol-preCol;
				if (cols>1){
					for (int i = 0;i < cols-1;i++){
						innerList.add(preCol,"\"\"");
					}
				}
				preCol = curCol;
				//-----------------------------------------end
				
				// Might be the empty string.
				innerList.add(thisStr);

				// Update column 
				if(thisColumn > -1){
					lastColumnNumber = thisColumn;
				}

			}else if("row".equals(name)) {

				// Print out any missing commas if needed
				if(minColumns > 0) {
					// Columns are 0 based
					if(lastColumnNumber == -1) { lastColumnNumber = 0; }
					for(int i=lastColumnNumber+1; i<(this.minColumnCount); i++) {//lastColumnNumber从0开始编号

						innerList.add("\"\"");
					}
				}
				// We're onto a new row
				if(rowlimit>-1){
					if(list.size()==rowlimit){
						throw new AppException("已读取到规定的行数:"+rowlimit);
					}
				}
				list.add(innerList);
				innerList = new ArrayList<String>();
				lastColumnNumber = -1;
				
				//---------------begin
				curCol = 0;
				preCol = 0;
				//---------------end
			}

		}
		
		/**
		 * Captures characters only if a suitable element is open.
		 * Originally was just "v"; extended for inlineStr also.
		 */
		public void characters(char[] ch, int start, int length)
		throws SAXException {
			if (vIsOpen)
				value.append(ch, start, length);
		}

		/**
		 * Converts an Excel column name like "C" to a zero-based index.
		 * @param name
		 * @return Index corresponding to the specified name
		 */
		private int nameToColumn(String name) {
			int column = -1;
			for (int i = 0; i < name.length(); ++i) {
				int c = name.charAt(i);
				column = (column + 1) * 26 + c - 'A';
			}
			return column;
		}
		
	}
	
	///////////////////////////////////////
	
	/**
	 * @category 读取xlsx实例
	 * @param String 文件路径
	 * @throws SAXException 
	 * @throws IOException 
	 * @throws OpenXML4JException
	 * */
	public ExcelXReader(String filePath) throws IOException, SAXException, OpenXML4JException{
		File xlsxFile = new File(filePath);
		if (! xlsxFile.exists()) {
			throw new AppException("找不到指定的文件!");
		}
		xlsxPackage = OPCPackage.open(xlsxFile.getPath(), PackageAccess.READ);
		sharedStrings = new ReadOnlySharedStringsTable(this.xlsxPackage);
		xssfReader = new XSSFReader(this.xlsxPackage);
		styles = xssfReader.getStylesTable();
	}

	/**
	 * Creates a new XLSX -> CSV converter
	 * Javadoc says I should use OPCPackage instead of Package, but OPCPackage 
	 * was not available in the POI 3.5-beta5 build I used.
	 * 
	 * @param pkg The XLSX package to process
	 * @param output The PrintStream to output the CSV to
	 * @param minColumns The minimum number of columns to output, or -1 for no minimum
	 * @throws SAXException 
	 * @throws IOException 
	 * @throws OpenXML4JException 
	 */
	public ExcelXReader(OPCPackage pkg, int minColumns) throws IOException, SAXException, OpenXML4JException {
		xlsxPackage = pkg;
		sharedStrings = new ReadOnlySharedStringsTable(this.xlsxPackage);
		xssfReader = new XSSFReader(this.xlsxPackage);
		styles = xssfReader.getStylesTable();
		this.minColumns = minColumns;
	}
	
	/**
	 * @category 设置最小的输出列数
	 * @param int 最小输出列数

	 * */
	public void setMinColumns(int clos){
		if(clos>0){
			minColumns = clos;
		}
	}

	/**
	 * @category 读取整个xlsx文件
	 * @throws IOException
	 * @throws OpenXML4JException
	 * @throws ParserConfigurationException
	 * @throws SAXException 
	 * @return List<List<String>> 返回的数据

	 */
	public List<List<String>> readSheets() throws IOException, OpenXML4JException, ParserConfigurationException, SAXException {
		if(xssfReader==null){
			throw new AppException("xssfReader 未初始化!");
		}
		if(styles==null){
			throw new AppException("styles 未初始化!");
		}
		if(sharedStrings==null){
			throw new AppException("sharedStrings 未初始化!");
		}
		XSSFReader.SheetIterator iter = (XSSFReader.SheetIterator)xssfReader.getSheetsData();
		int index = 0;
		List<List<String>> list = new ArrayList<List<String>>();
		while (iter.hasNext()) {
			InputStream stream = iter.next();
			//String sheetName = iter.getSheetName();
			List<List<String>> innerList = processSheet(styles, sharedStrings, stream, -1);
			stream.close();
			if(index>0){
				if(innerList.size()>0){
					innerList.remove(0);//移除标题行

				}
			}
			if(innerList.size()>0){
				list.addAll(innerList);
			}
			++index;
		}
		return list;
	}

	/**
	 * @category 读取xlsx文件中的某个sheet
	 * @throws InvalidFormatException
	 * @throws IOException
	 * @throws ParserConfigurationException
	 * @throws SAXException 
	 * @return List<List<String>> 返回的数据

	 * */
	public List<List<String>> readSheet(int sheetId) throws InvalidFormatException, IOException, ParserConfigurationException, SAXException {
        // rId2 found by processing the Workbook   
        // 根据 rId# 或 rSheet# 查找sheet
		if(xssfReader==null){
			throw new AppException("xssfReader 未初始化!");
		}
		if(styles==null){
			throw new AppException("styles 未初始化!");
		}
		if(sharedStrings==null){
			throw new AppException("sharedStrings 未初始化!");
		}
        InputStream stream = xssfReader.getSheet("rId"+sheetId);   
        List<List<String>> list = processSheet(styles, sharedStrings, stream, -1);
        stream.close();
        return list;
    }
	
	/**
	 * @category 读取xlsx文件中的某个sheet开头的rowLimit行数
	 * @throws InvalidFormatException
	 * @throws IOException
	 * @throws ParserConfigurationException
	 * @throws SAXException 
	 * @return List<List<String>> 返回的数据

	 * */
	public List<List<String>> readSheet(int sheetId,int rowLimit) throws InvalidFormatException, IOException, ParserConfigurationException, SAXException {
        // rId2 found by processing the Workbook   
        // 根据 rId# 或 rSheet# 查找sheet
		if(xssfReader==null){
			throw new AppException("xssfReader 未初始化!");
		}
		if(styles==null){
			throw new AppException("styles 未初始化!");
		}
		if(sharedStrings==null){
			throw new AppException("sharedStrings 未初始化!");
		}
        InputStream stream = xssfReader.getSheet("rId"+sheetId);   
        List<List<String>> list = processSheet(styles, sharedStrings, stream, rowLimit);
        stream.close();
        return list;
    }
	
	/**
	 * @category 关闭对文件的引用
	 * */
	public void close(){
		if(xlsxPackage!=null){
			xlsxPackage.revert();
		}
	}
	
	/**
	 * Parses and shows the content of one sheet
	 * using the specified styles and shared-strings tables.
	 * @param styles
	 * @param strings
	 * @param sheetInputStream
	 * @return List<List<String>> 读取的数据

	 */
	private List<List<String>> processSheet(
			StylesTable styles,
			ReadOnlySharedStringsTable strings, 
			InputStream sheetInputStream,
			int rowlimit) throws IOException, ParserConfigurationException, SAXException {

		InputSource sheetSource = new InputSource(sheetInputStream);
		SAXParserFactory saxFactory = SAXParserFactory.newInstance();
		SAXParser saxParser = saxFactory.newSAXParser();
		XMLReader sheetParser = saxParser.getXMLReader();
		List<List<String>> dataList = new ArrayList<List<String>>();
		ContentHandler handler = new MyXSSFSheetHandler(styles, strings, this.minColumns,dataList,rowlimit);
		sheetParser.setContentHandler(handler);
		try{
			sheetParser.parse(sheetSource);
		}catch(AppException e){}
		return dataList;
	}
	
	private OPCPackage xlsxPackage;
	private ReadOnlySharedStringsTable sharedStrings;
	private XSSFReader xssfReader;
	private StylesTable styles; 
	private int minColumns = -1;
}



